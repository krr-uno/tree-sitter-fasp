==================
comments
==================

% foo
%* 
 * bar
 *%

---

(source_file
  (line_comment)
  (block_comment))

==================
rules
==================

head.
head :-  body.

---

(source_file
  (rule
    (literal
      (symbolic_atom
        (identifier))))
  (rule
    (literal
      (symbolic_atom
        (identifier)))
    (body
      (body_literal
        (symbolic_atom
          (identifier))))))

==================
constraints
==================

:- body.
:- .

---

(source_file
  (integrity_constraint
    (body
      (body_literal
        (symbolic_atom
          (identifier)))))
  (integrity_constraint))

==================
weak constraint
==================

:~ a, b. [1@2,1,2,3]
:~ . [0]

---

(source_file
  (weak_constraint
    (body
      (body_literal
        (symbolic_atom
          (identifier)))
      (body_literal
        (symbolic_atom
          (identifier))))
    (weight
      (number)
      (number))
    (terms
      (number)
      (number)
      (number)))
  (weak_constraint
    (weight
      (number))))

==================
minimize
==================

#minimize{ 1@3: a; 1: b; 2,3: b,c  }.

---

(source_file
  (minimize
    (optimize_elements
      (optimize_element
        (weight
          (number)
          (number))
        (condition
          (literal
            (symbolic_atom
              (identifier)))))
      (optimize_element
        (weight
          (number))
        (condition
          (literal
            (symbolic_atom
              (identifier)))))
      (optimize_element
        (weight
          (number))
        (terms
          (number))
        (condition
          (literal
            (symbolic_atom
              (identifier)))
          (literal
            (symbolic_atom
              (identifier))))))))

==================
maximize
==================

#maximize{ }.

---

(source_file
  (maximize))

==================
defined
==================

#defined a/2.
#defined -a/2.

---

(source_file
  (defined
    (signature
      (identifier)
      (number)))
  (defined
    (signature
      (classical_negation)
      (identifier)
      (number))))

==================
project
==================

#project a/2.
#project -a/2.
#project a.
#project a : .
#project a : b.

---

(source_file
  (project_signature
    (signature
      (identifier)
      (number)))
  (project_signature
    (signature
      (classical_negation)
      (identifier)
      (number)))
  (project_atom
    (symbolic_atom
      (identifier)))
  (project_atom
    (symbolic_atom
      (identifier)))
  (project_atom
    (symbolic_atom
      (identifier))
    (body
      (body_literal
        (symbolic_atom
          (identifier))))))

==================
const
==================

#const x = 1.
#const x = f((), |x|).
#const x = 1. [default]
#const x = 2. [override]

---

(source_file
  (const
    (identifier)
    (number))
  (const
    (identifier)
    (function
      (identifier)
      (terms
        (tuple)
        (abs
          (function
            (identifier))))))
  (const
    (identifier)
    (number)
    (const_type))
  (const
    (identifier)
    (number)
    (const_type)))

==================
script
==================

#script (python)

def main(ctl):
  ctl.ground()

#end.

---

(source_file
  (script
    (identifier)
    (code)))

==================
include
==================

#include "a".
#include <b>.

---

(source_file
  (include
    (string
      (string_fragment)))
  (include
    (identifier)))

==================
program
==================

#program base.
#program base().
#program acid(a, b).

---

(source_file
  (program
    (identifier))
  (program
    (identifier))
  (program
    (identifier)
    (parameters
      (identifier)
      (identifier))))

==================
external
==================

#external a.
#external -a.
#external a : b.
#external a(X) : p(B). [X]

---

(source_file
  (external
    (symbolic_atom
      (identifier)))
  (external
    (symbolic_atom
      (classical_negation)
      (identifier)))
  (external
    (symbolic_atom
      (identifier))
    (body
      (body_literal
        (symbolic_atom
          (identifier)))))
  (external
    (symbolic_atom
      (identifier)
      (terms
        (variable)))
    (body
      (body_literal
        (symbolic_atom
          (identifier)
          (terms
            (variable)))))
    (variable)))

==================
edge
==================

#edge (a,b).
#edge (a,b; b, c).
#edge (a,b; b, c) : q.

---

(source_file
  (edge
    (edge_pair
      (function
        (identifier))
      (function
        (identifier))))
  (edge
    (edge_pair
      (function
        (identifier))
      (function
        (identifier)))
    (edge_pair
      (function
        (identifier))
      (function
        (identifier))))
  (edge
    (edge_pair
      (function
        (identifier))
      (function
        (identifier)))
    (edge_pair
      (function
        (identifier))
      (function
        (identifier)))
    (body
      (body_literal
        (symbolic_atom
          (identifier))))))

==================
heuristic
==================

#heuristic a(). [true,blub]
#heuristic a(). [true@10,blub]
#heuristic a(X) : q(X). [true@X,blub]

---

(source_file
  (heuristic
    (symbolic_atom
      (identifier))
    (weight
      (function
        (identifier)))
    (function
      (identifier)))
  (heuristic
    (symbolic_atom
      (identifier))
    (weight
      (function
        (identifier))
      (number))
    (function
      (identifier)))
  (heuristic
    (symbolic_atom
      (identifier)
      (terms
        (variable)))
    (body
      (body_literal
        (symbolic_atom
          (identifier)
          (terms
            (variable)))))
    (weight
      (function
        (identifier))
      (variable))
    (function
      (identifier))))
