==================
symbolic literals
==================

:- p(X), not p(X), not not p(X), -p(X), not -p(X), not not -p(X).

---

(source_file
  (integrity_constraint
    (body
      (body_literal
        (symbolic_atom
          (identifier)
          (terms
            (variable))))
      (body_literal
        (default_negation)
        (symbolic_atom
          (identifier)
          (terms
            (variable))))
      (body_literal
        (double_default_negation)
        (symbolic_atom
          (identifier)
          (terms
            (variable))))
      (body_literal
        (symbolic_atom
          (classical_negation)
          (identifier)
          (terms
            (variable))))
      (body_literal
        (default_negation)
        (symbolic_atom
          (classical_negation)
          (identifier)
          (terms
            (variable))))
      (body_literal
        (double_default_negation)
        (symbolic_atom
          (classical_negation)
          (identifier)
          (terms
            (variable)))))))

==================
comparisions
==================

:- X < Y < Z, -p(X) < X < Y.

---

(source_file
  (integrity_constraint
    (body
      (body_literal
        (comparison
          (variable)
          (relation)
          (variable)
          (relation)
          (variable)))
      (body_literal
        (comparison
          (unary_operation
            (function
              (identifier)
              (terms
                (variable))))
          (relation)
          (variable)
          (relation)
          (variable))))))

==================
conditional literals
==================

:- a, not b: p, c; p(X):; not not X < Y < Z: p(X).

---

(source_file
  (integrity_constraint
    (body
      (body_literal
        (symbolic_atom
          (identifier)))
      (conditional_literal
        (literal
          (default_negation)
          (symbolic_atom
            (identifier)))
        (condition
          (literal
            (symbolic_atom
              (identifier)))
          (literal
            (symbolic_atom
              (identifier)))))
      (conditional_literal
        (literal
          (symbolic_atom
            (identifier)
            (terms
              (variable)))))
      (conditional_literal
        (literal
          (double_default_negation)
          (comparison
            (variable)
            (relation)
            (variable)
            (relation)
            (variable)))
        (condition
          (literal
            (symbolic_atom
              (identifier)
              (terms
                (variable)))))))))

==================
body set aggregates
==================

:- not 1 { a; a: ; a: b; a: b, c } <= 3.

---

(source_file
  (integrity_constraint
    (body
      (body_literal
        (default_negation)
        (set_aggregate
          (lower
            (number))
          (set_aggregate_elements
            (set_aggregate_element
              (literal
                (symbolic_atom
                  (identifier))))
            (set_aggregate_element
              (literal
                (symbolic_atom
                  (identifier))))
            (set_aggregate_element
              (literal
                (symbolic_atom
                  (identifier)))
              (condition
                (literal
                  (symbolic_atom
                    (identifier)))))
            (set_aggregate_element
              (literal
                (symbolic_atom
                  (identifier)))
              (condition
                (literal
                  (symbolic_atom
                    (identifier)))
                (literal
                  (symbolic_atom
                    (identifier))))))
          (upper
            (relation)
            (number)))))))

==================
body aggregates
==================

:- not 1 #count { :; :a; a; a: ; a: b, c; a, b } <= 3.

---

(source_file
  (integrity_constraint
    (body
      (body_literal
        (default_negation)
        (body_aggregate
          (lower
            (number))
          (aggregate_function)
          (body_aggregate_elements
            (body_aggregate_element)
            (body_aggregate_element
              (condition
                (literal
                  (symbolic_atom
                    (identifier)))))
            (body_aggregate_element
              (terms
                (function
                  (identifier))))
            (body_aggregate_element
              (terms
                (function
                  (identifier))))
            (body_aggregate_element
              (terms
                (function
                  (identifier)))
              (condition
                (literal
                  (symbolic_atom
                    (identifier)))
                (literal
                  (symbolic_atom
                    (identifier)))))
            (body_aggregate_element
              (terms
                (function
                  (identifier))
                (function
                  (identifier)))))
          (upper
            (relation)
            (number)))))))
